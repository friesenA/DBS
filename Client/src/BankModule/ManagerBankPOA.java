package BankModule;


/**
* BankModule/ManagerBankPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from Bank.idl
* Tuesday, October 24, 2017 12:13:01 o'clock AM EDT
*/

public abstract class ManagerBankPOA extends org.omg.PortableServer.Servant
 implements BankModule.ManagerBankOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("createAccountRecord", new java.lang.Integer (0));
    _methods.put ("editRecord", new java.lang.Integer (1));
    _methods.put ("getAccountCount", new java.lang.Integer (2));
    _methods.put ("deposit", new java.lang.Integer (3));
    _methods.put ("withdraw", new java.lang.Integer (4));
    _methods.put ("getBalance", new java.lang.Integer (5));
    _methods.put ("transferFund", new java.lang.Integer (6));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // BankModule/ManagerBank/createAccountRecord
       {
         String managerID = in.read_string ();
         String firstName = in.read_string ();
         String lastName = in.read_string ();
         String address = in.read_string ();
         String phone = in.read_string ();
         String branch = in.read_string ();
         String $result = null;
         $result = this.createAccountRecord (managerID, firstName, lastName, address, phone, branch);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 1:  // BankModule/ManagerBank/editRecord
       {
         String managerID = in.read_string ();
         String customerID = in.read_string ();
         String fieldName = in.read_string ();
         String newValue = in.read_string ();
         String $result = null;
         $result = this.editRecord (managerID, customerID, fieldName, newValue);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 2:  // BankModule/ManagerBank/getAccountCount
       {
         String managerID = in.read_string ();
         String $result = null;
         $result = this.getAccountCount (managerID);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 3:  // BankModule/ManagerBank/deposit
       {
         String managerID = in.read_string ();
         String customerID = in.read_string ();
         double amt = in.read_double ();
         String $result = null;
         $result = this.deposit (managerID, customerID, amt);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 4:  // BankModule/ManagerBank/withdraw
       {
         String managerID = in.read_string ();
         String customerID = in.read_string ();
         double amt = in.read_double ();
         String $result = null;
         $result = this.withdraw (managerID, customerID, amt);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 5:  // BankModule/ManagerBank/getBalance
       {
         String managerID = in.read_string ();
         String customerID = in.read_string ();
         String $result = null;
         $result = this.getBalance (managerID, customerID);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 6:  // BankModule/ManagerBank/transferFund
       {
         String managerID = in.read_string ();
         String sourceCustomerID = in.read_string ();
         double amount = in.read_double ();
         String destinationCustomerID = in.read_string ();
         String $result = null;
         $result = this.transferFund (managerID, sourceCustomerID, amount, destinationCustomerID);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:BankModule/ManagerBank:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public ManagerBank _this() 
  {
    return ManagerBankHelper.narrow(
    super._this_object());
  }

  public ManagerBank _this(org.omg.CORBA.ORB orb) 
  {
    return ManagerBankHelper.narrow(
    super._this_object(orb));
  }


} // class ManagerBankPOA
